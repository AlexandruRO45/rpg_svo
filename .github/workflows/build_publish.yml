name: Build and Publish

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: 
      - main
      - develop
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Force publish to PyPI (use with caution)'
        required: false
        default: false
        type: boolean
      build_target:
        description: 'Build target'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'wheels-only'
          - 'ubuntu-only'

env:
  PYTHON_VERSIONS: "cp38-* cp39-* cp310-* cp311-* cp312-*"

jobs:
  validate_trigger:
    name: "Validate Workflow"
    runs-on: ubuntu-latest
    outputs:
      should_build_wheels: ${{ steps.check.outputs.should_build_wheels }}
      should_build_ubuntu: ${{ steps.check.outputs.should_build_ubuntu }}
    steps:
      - name: "Debug Info"
        run: |
          echo "🚀 Workflow Details:"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo "Build Target: ${{ github.event.inputs.build_target || 'all' }}"
          
      - name: "Checkout"
        uses: actions/checkout@v4.2.2
        
      - name: "Determine Build Strategy"
        id: check
        run: |
          BUILD_TARGET="${{ github.event.inputs.build_target || 'all' }}"
          
          if [[ "$BUILD_TARGET" == "ubuntu-only" ]]; then
            echo "should_build_wheels=false" >> $GITHUB_OUTPUT
            echo "should_build_ubuntu=true" >> $GITHUB_OUTPUT
          elif [[ "$BUILD_TARGET" == "wheels-only" ]]; then
            echo "should_build_wheels=true" >> $GITHUB_OUTPUT
            echo "should_build_ubuntu=false" >> $GITHUB_OUTPUT
          else
            echo "should_build_wheels=true" >> $GITHUB_OUTPUT
            echo "should_build_ubuntu=true" >> $GITHUB_OUTPUT
          fi

  build_wheels:
    name: "Build Wheels (${{ matrix.os }})"
    needs: validate_trigger
    if: needs.validate_trigger.outputs.should_build_wheels == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4.2.2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: "Setup QEMU (Linux)"
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3.6.0
        with:
          platforms: arm64

      - name: "Build Wheels"
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_BUILD: ${{ env.PYTHON_VERSIONS }}
          CIBW_SKIP: "*-musllinux_* pp*"
          
          # Architecture settings
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_WINDOWS: "AMD64"  # Removed ARM64 for stability
          CIBW_ARCHS_MACOS: ${{ matrix.os == 'macos-13' && 'x86_64' || 'arm64' }}
          
          # Test configuration
          CIBW_TEST_COMMAND: "python -c 'import svo_cpp; print(f\"✅ svo_cpp {svo_cpp.__version__} imported successfully\")'"
          CIBW_TEST_SKIP: "*-*linux_aarch64"  # Skip ARM64 tests due to emulation
          
          # Linux dependencies
          CIBW_BEFORE_ALL_LINUX: |
            set -e -x
            # Use more reliable package manager approach
            if command -v yum &> /dev/null; then
              # CentOS/RHEL
              yum update -y
              yum install -y epel-release
              yum install -y git cmake gcc-c++ make wget curl
              yum install -y eigen3-devel opencv-devel boost-devel python3-devel
            elif command -v apt-get &> /dev/null; then
              # Debian/Ubuntu
              apt-get update
              apt-get install -y git cmake build-essential wget curl
              apt-get install -y libeigen3-dev libopencv-dev libboost-all-dev python3-dev
            fi
            
            # Install pybind11 from source for consistency
            cd /tmp
            wget -q https://github.com/pybind/pybind11/archive/v2.13.1.tar.gz
            tar -xzf v2.13.1.tar.gz
            cd pybind11-2.13.1
            mkdir build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release -DPYBIND11_TEST=OFF
            make -j$(nproc) install
            
          # Windows dependencies  
          CIBW_BEFORE_ALL_WINDOWS: |
            echo "Installing vcpkg dependencies..."
            C:\vcpkg\vcpkg.exe integrate install
            C:\vcpkg\vcpkg.exe install --triplet=x64-windows eigen3 opencv4[core,imgproc] boost-serialization pybind11
            
          # macOS dependencies
          CIBW_BEFORE_ALL_MACOS: |
            set -e -x
            export HOMEBREW_NO_AUTO_UPDATE=1
            brew install eigen opencv boost pybind11 cmake pkg-config
            
          # Build environment
          CIBW_ENVIRONMENT_LINUX: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DPYBIND11_FINDPYTHON=ON -DCMAKE_CXX_STANDARD=14"
            PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
            
          CIBW_ENVIRONMENT_WINDOWS: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DPYBIND11_FINDPYTHON=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_CXX_STANDARD=14"
            
          CIBW_ENVIRONMENT_MACOS: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DPYBIND11_FINDPYTHON=ON -DCMAKE_OSX_ARCHITECTURES=${{ matrix.os == 'macos-13' && 'x86_64' || 'arm64' }} -DCMAKE_CXX_STANDARD=14"
            PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"

      - name: "Verify Wheels"
        run: |
          python -m pip install --upgrade pip twine
          python -m twine check wheelhouse/*.whl
          ls -la wheelhouse/

      - name: "Upload Artifacts"
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
          retention-days: 30

  build_ubuntu_dev:
    name: "Ubuntu Dev (${{ matrix.ubuntu-version }}, Python ${{ matrix.python-version }})"
    needs: validate_trigger
    if: needs.validate_trigger.outputs.should_build_ubuntu == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu-version: "20.04"
            python-version: "3.8"
          - ubuntu-version: "22.04"
            python-version: "3.10"
          - ubuntu-version: "24.04"
            python-version: "3.12"

    container:
      image: ubuntu:${{ matrix.ubuntu-version }}
      options: --user root

    steps:
      - name: "Setup Container"
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -e -x
          apt-get update
          apt-get install -y \
            software-properties-common \
            gpg-agent \
            wget \
            curl \
            git \
            build-essential \
            cmake \
            pkg-config
          
          # Add deadsnakes PPA for Python versions
          add-apt-repository -y ppa:deadsnakes/ppa
          apt-get update
          
          # Install Python and dev tools
          apt-get install -y \
            python${{ matrix.python-version }} \
            python${{ matrix.python-version }}-dev \
            python${{ matrix.python-version }}-venv \
            python3-pip
          
          # Install distutils for older Python versions
          if dpkg --compare-versions "${{ matrix.python-version }}" "lt" "3.12"; then
            apt-get install -y python${{ matrix.python-version }}-distutils
          fi

      - name: "Checkout"
        uses: actions/checkout@v4.2.2
        with:
          submodules: recursive

      - name: "Install Dependencies"
        run: |
          set -e -x
          # Install system dependencies
          apt-get install -y \
            libeigen3-dev \
            libopencv-dev \
            libboost-all-dev \
            libboost-serialization-dev
          
          # Build and install pybind11
          cd /tmp
          wget -q https://github.com/pybind/pybind11/archive/v2.13.1.tar.gz
          tar -xzf v2.13.1.tar.gz
          cd pybind11-2.13.1
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYBIND11_TEST=OFF
          make -j$(nproc) install
          ldconfig

      - name: "Build and Test"
        run: |
          set -e -x
          # Create virtual environment
          python${{ matrix.python-version }} -m venv venv
          . venv/bin/activate
          
          # Upgrade build tools
          python -m pip install --upgrade pip setuptools wheel build
          
          # Build wheel
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DPYBIND11_FINDPYTHON=ON -DCMAKE_CXX_STANDARD=14" \
          python -m build --wheel --outdir dist/
          
          # Test installation
          python -m pip install dist/*.whl
          python -c "
          import svo_cpp
          print(f'✅ Successfully imported svo_cpp version {svo_cpp.__version__}')
          "

      - name: "Upload Artifacts"
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ubuntu-dev-${{ matrix.ubuntu-version }}-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 7

  collect_and_publish:
    name: "Collect & Publish"
    needs: [validate_trigger, build_wheels, build_ubuntu_dev]
    if: always() && (needs.build_wheels.result == 'success' || needs.build_ubuntu_dev.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: "Download Wheel Artifacts"
        uses: actions/download-artifact@v5
        with:
          pattern: wheels-*
          path: collected-wheels/
          merge-multiple: true

      - name: "Prepare Distribution"
        run: |
          mkdir -p dist/
          find collected-wheels -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/
          
          # Verify wheels
          python -m pip install --upgrade pip twine
          python -m twine check dist/*.whl || true

      - name: "Upload Combined Artifacts"
        uses: actions/upload-artifact@v4.6.2
        with:
          name: all-wheels
          path: dist/*.whl
          retention-days: 90

      - name: "Publish to PyPI"
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          print-hash: true
          verbose: true

      - name: "Create GitHub Release"
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Create release notes
          cat > release_notes.md << EOF
          # svo-cpp $VERSION
          
          ## 🎉 What's New
          
          This release provides pre-built wheels for multiple platforms and Python versions.
          
          ## 📦 Supported Platforms
          - **Linux**: x86_64, aarch64
          - **Windows**: AMD64
          - **macOS**: Intel (x86_64) and Apple Silicon (arm64)
          
          ## 🐍 Python Support
          - Python 3.8, 3.9, 3.10, 3.11, 3.12
          
          ## 🚀 Installation
          \`\`\`bash
          pip install svo-cpp==$VERSION
          \`\`\`
          
          ## 📋 Wheels in this Release
          $(ls -1 dist/*.whl | sed 's/dist\///g' | sed 's/^/- /')
          EOF
          
          # Create release
          gh release create "v$VERSION" \
            --title "svo-cpp $VERSION" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=${{ contains(github.ref, '-') && 'true' || 'false' }} \
            dist/*.whl