# .github/workflows/build_publish.yml
name: Build and Publish

# Prevent multiple concurrent runs for the same branch or tag
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    tags: ["v*.*.*"]
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Force publish to PyPI'
        type: boolean
        default: false
      build_target:
        description: 'Build target'
        type: choice
        default: 'all'
        options: ['all', 'wheels-only', 'ubuntu-only']

env:
  PYTHON_VERSIONS: "cp38-* cp39-* cp310-* cp311-* cp312-*"

jobs:
  build_wheels:
    name: "Build Wheels (${{ matrix.os.name }})"
    # SIMPLIFICATION: Removed 'validate_trigger' job. Logic is now here.
    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.build_target != 'ubuntu-only'
    runs-on: ${{ matrix.os.name }}
    strategy:
      fail-fast: false
      matrix:
        # SIMPLIFICATION: Matrix is more explicit and drives the config.
        os:
          - { name: ubuntu-latest,  script: ".github/scripts/install-deps.sh",  arch: "x86_64 aarch64" }
          - { name: windows-latest, script: ".github/scripts/install-deps.ps1", arch: "AMD64" }
          - { name: macos-13,       script: ".github/scripts/install-deps.sh",  arch: "x86_64" }
          - { name: macos-14,       script: ".github/scripts/install-deps.sh",  arch: "arm64" }

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with: { submodules: recursive, fetch-depth: 0 }

      - name: "Setup QEMU (for Linux ARM64 build)"
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with: { platforms: arm64 }

      - name: "Build Wheels"
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_BEFORE_ALL_WINDOWS: "powershell .github/scripts/install-deps.ps1"
          CIBW_BEFORE_ALL_LINUX: "bash .github/scripts/install-deps.sh"
          CIBW_BEFORE_ALL_MACOS: "bash .github/scripts/install-deps.sh"
          CIBW_BUILD: ${{ env.PYTHON_VERSIONS }}
          CIBW_SKIP: "*-musllinux_* pp*"
          CIBW_ARCHS_LINUX: ${{ matrix.os.arch }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.os.arch }}
          CIBW_ARCHS_MACOS: ${{ matrix.os.arch }}
          CIBW_TEST_COMMAND: "python -c 'import svo_cpp; print(f\"âœ… svo_cpp {svo_cpp.__version__} imported successfully\")'"
          CIBW_TEST_SKIP: "*-*linux_aarch64" 

      - name: "Upload Wheel Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ runner.os }}-${{ matrix.os.arch }}
          path: ./wheelhouse/*.whl

  build_ubuntu_dev:
    name: "Ubuntu Dev (${{ matrix.ubuntu-version }}, py${{ matrix.python-version }})"
    if: >
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.build_target != 'wheels-only'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { ubuntu-version: "20.04", python-version: "3.8" }
          - { ubuntu-version: "22.04", python-version: "3.10" }
          - { ubuntu-version: "24.04", python-version: "3.12" }
    container:
      image: ubuntu:${{ matrix.ubuntu-version }}

    steps:
      - name: "Install Build Tools & Python"
        env: { DEBIAN_FRONTEND: noninteractive }
        run: |
          set -eux
          apt-get update
          apt-get install -y software-properties-common git python3-pip
          add-apt-repository -y ppa:deadsnakes/ppa
          apt-get update
          apt-get install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-dev python${{ matrix.python-version }}-venv
          if dpkg --compare-versions "${{ matrix.python-version }}" "lt" "3.12"; then
            apt-get install -y python${{ matrix.python-version }}-distutils
          fi

      - name: "Checkout"
        uses: actions/checkout@v4
        with: { submodules: recursive }

      - name: "Install C++ Dependencies"
        run: bash .github/scripts/install-deps.sh

      - name: "Build and Test Wheel"
        run: |
          set -eux
          python${{ matrix.python-version }} -m venv venv
          . venv/bin/activate
          # SIMPLIFICATION: 'pip wheel' reads pyproject.toml and handles the entire build process.
          python -m pip install --upgrade pip wheel
          python -m pip wheel . --wheel-dir=dist/
          # Install and test the wheel we just built
          python -m pip install dist/*.whl
          python -c "import svo_cpp; print(f'âœ… Imported svo_cpp version {svo_cpp.__version__}')"

      - name: "Upload Dev Wheel Artifact"
        uses: actions/upload-artifact@v4
        with:
          # FIX: Renamed artifact to match the download pattern in the publish job.
          name: wheels-ubuntu-dev-${{ matrix.ubuntu-version }}
          path: dist/*.whl

  collect_and_publish:
    name: "Collect & Publish"
    needs: [build_wheels, build_ubuntu_dev]
    if: always() && (needs.build_wheels.result == 'success' || needs.build_ubuntu_dev.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For trusted publishing to PyPI
      contents: write # For creating GitHub Releases

    steps:
      - name: "Download all wheel artifacts"
        uses: actions/download-artifact@v4
        with:
          # SIMPLIFICATION: One pattern downloads all artifacts into one directory.
          pattern: wheels-*
          path: dist/
          merge-multiple: true

      - name: "Checkout code (for release creation)"
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: "List downloaded files"
        run: |
          echo "ðŸ“¦ Wheels to be published:"
          ls -R dist/

      - name: "Publish to PyPI"
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          skip-existing: true # Don't fail if a wheel already exists on PyPI

      - name: "Create GitHub Release"
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # SIMPLIFICATION: Auto-generate release notes and attach all wheels.
          gh release create ${{ github.ref_name }} --generate-notes dist/*.whl