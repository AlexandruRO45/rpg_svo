name: Build and Publish

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: false
        default: false
        type: boolean

env:
  # Common build configuration
  CMAKE_BUILD_TYPE: Release
  CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
  CIBW_SKIP: "*-musllinux_* pp* cp38-win_arm64 cp39-win_arm64"
  CIBW_TEST_COMMAND: "python -c 'import svo_cpp; print(f\"svo_cpp {svo_cpp.__version__} imported successfully\")'"
  CIBW_TEST_SKIP: "*-*linux_aarch64 *-win_arm64"

jobs:
  # Single job to build wheels for all platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-12, macos-14]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up QEMU (Linux ARM64)
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Configure build for each OS
      shell: bash
      run: |
        case "${{ runner.os }}" in
          Linux)
            echo "CIBW_ARCHS_LINUX=x86_64 aarch64" >> $GITHUB_ENV
            ;;
          Windows)
            echo "CIBW_ARCHS_WINDOWS=AMD64" >> $GITHUB_ENV
            ;;
          macOS)
            if [[ "${{ matrix.os }}" == "macos-12" ]]; then
              echo "CIBW_ARCHS_MACOS=x86_64" >> $GITHUB_ENV
            else
              echo "CIBW_ARCHS_MACOS=arm64" >> $GITHUB_ENV
            fi
            ;;
        esac

    - name: Install system dependencies
      shell: bash
      run: |
        case "${{ runner.os }}" in
          Linux)
            # Dependencies will be installed in cibuildwheel
            echo "Linux dependencies handled by cibuildwheel"
            ;;
          Windows)
            # Install vcpkg dependencies
            vcpkg install eigen3:x64-windows opencv4:x64-windows boost-serialization:x64-windows pybind11:x64-windows
            ;;
          macOS)
            brew install eigen opencv boost pybind11
            ;;
        esac

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16
      env:
        # Linux-specific configuration
        CIBW_BEFORE_ALL_LINUX: |
          yum update -y && yum install -y epel-release
          yum install -y eigen3-devel opencv-devel boost-devel boost-serialization cmake3 git gcc-c++
          pip install pybind11-global
        CIBW_ENVIRONMENT_LINUX: >
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DPYBIND11_FINDPYTHON=ON"
        
        # Windows-specific configuration  
        CIBW_ENVIRONMENT_WINDOWS: >
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DPYBIND11_FINDPYTHON=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
        
        # macOS-specific configuration
        CIBW_ENVIRONMENT_MACOS: >
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DPYBIND11_FINDPYTHON=ON -DCMAKE_OSX_ARCHITECTURES=${{ env.CIBW_ARCHS_MACOS }}"

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl
        retention-days: 30

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Build SDist
      run: pipx run build --sdist

    - name: Upload SDist
      uses: actions/upload-artifact@v4
      with:
        name: source-dist
        path: dist/*.tar.gz

  # Test wheels on different systems (optional, can be disabled for speed)
  test-wheels:
    name: Test wheels on ${{ matrix.os }}
    needs: build-wheels
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.12']

    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: wheels/
        merge-multiple: true

    - name: Test wheel installation
      shell: bash
      run: |
        # Find appropriate wheel for current platform
        python -m pip install --find-links wheels/ svo-cpp --force-reinstall --no-deps
        python -c "import svo_cpp; print(f'Successfully imported svo_cpp version {svo_cpp.__version__}')"

  # Collect all artifacts and publish
  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && inputs.publish_to_pypi)
    environment:
      name: pypi
      url: https://pypi.org/p/svo-cpp
    permissions:
      id-token: write
      contents: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true

    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        body: |
          ## Installation
          ```bash
          pip install svo-cpp==${{ github.ref_name }}
          ```
          
          ## Supported Platforms
          - Linux (x86_64, aarch64) 
          - Windows (x64)
          - macOS (Intel & Apple Silicon)
          - Python 3.8 - 3.12